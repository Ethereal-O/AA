server:
  port: 8443
#  ssl:
#    key-store: classpath:tomcat.keystore
#    key-store-password: '020402'
#    keyAlias: tomcat

spring:
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods:
              - GET
              - POST
  application:
    name: other-service


  #  port: 8080

  datasource:
    username: root
    password: '020402'
    url: jdbc:mysql://localhost:3306/mybookstore?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8
    driver-class-name: com.mysql.cj.jdbc.Driver
    tomcat:
      max-active: 20

  jpa:
    database: mysql
    show-sql: true
    properties:
      hibernate:
        hbm2ddl:
          auto: update

  thymeleaf:
    cache: false



  kafka:
    bootstrap-servers: localhost:9092 # kafka集群信息，多个用逗号间隔
    # 生产者
    producer:
      # 重试次数，设置大于0的值，则客户端会将发送失败的记录重新发送
      retries: 3
      batch-size: 16384 #批量处理大小，16K
      buffer-memory: 33554432 #缓冲存储大，32M
      acks: 1
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    # 消费者
    consumer:
      # 消费者组
      group-id: BookstoreGroup
      # 是否自动提交
      enable-auto-commit: false
      # 消费偏移配置
      # none：如果没有为消费者找到先前的offset的值,即没有自动维护偏移量,也没有手动维护偏移量,则抛出异常
      # earliest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从头开始消费
      # latest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从最新的数据开始消费
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    # 监听
    listener:
      # record：当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
      # batch：当每一批poll()的数据被ListenerConsumer处理之后提交
      # time：当每一批poll()的数据被ListenerConsumer处理之后，距离上次提交时间大于TIME时提交
      # count：当每一批poll()的数据被ListenerConsumer处理之后，被处理record数量大于等于COUNT时提交
      # count_time：TIME或COUNT中有一个条件满足时提交
      # manual：当每一批poll()的数据被ListenerConsumer处理之后, 手动调用Acknowledgment.acknowledge()后提交
      # manual_immediate：手动调用Acknowledgment.acknowledge()后立即提交，一般推荐使用这种
      ack-mode: manual_immediate

    redis:
      database: 0
      timeout: 300
      host: localhost
      port: 6379
      password:
      jedis:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0



## Redis数据库索引（默认为0）
#  spring.redis.database=0
#  # Redis服务器地址
#  spring.redis.host=localhost
#  # Redis服务器连接端口
#  spring.redis.port=6379
#  # Redis服务器连接密码（默认为空）
#  spring.redis.password=
#  #连接池最大连接数（使用负值表示没有限制）
#  spring.redis.jedis.pool.max-active=8
#  # 连接池最大阻塞等待时间（使用负值表示没有限制）
#  spring.redis.jedis.pool.max-wait=-1
#  # 连接池中的最大空闲连接
#  spring.redis.jedis.pool.max-idle=8
#  # 连接池中的最小空闲连接
#  spring.redis.jedis.pool.min-idle=0
#  # 连接超时时间（毫秒）
#  spring.redis.timeout=300


eureka:
  instance:
    prefer-ip-address: true
    ip-address: localhost
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8040/eureka
    eureka-service-url-poll-interval-seconds: 10
